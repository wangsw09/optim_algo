import sys
import os

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import numpy as np
import numpy.random as npr
import numpy.linalg as npla

import gd

def test_linear_nuclear():
    n = 10
    p1 = 8
    p2 = 9
    npr.seed(124)
    y = npr.normal(size=n)
    X = npr.normal(size=(n, p1, p2))
    lam = 1.0
    correct_ans = np.array([[0.0410671, 0.19422502, -0.04023965, -0.09388285,
        -0.0031811, -0.05051642, -0.06554216, -0.1096162, 0.00433118], [
            0.01679511, 0.04501784, -0.00523163, -0.02701542, -0.01911984,
            -0.01820878, -0.0273839 , -0.02293596, 0.00929304], [ 0.15312972,
                0.15753174, 0.01374298, -0.09451138, -0.13005756, -0.09342883,
                -0.00182788, -0.04736003, 0.08185103], [-0.08484022,
                    -0.20641338, 0.03105729, 0.09236465, 0.01193295,
                    0.06073392, 0.00125351, 0.10203818, -0.01982825], [
                        0.06484584, -0.12983826, 0.05270997, 0.08072309,
                        -0.01353452, 0.01907052, 0.20210297, 0.10568523,
                        0.03005491], [-0.0191619 , -0.03733339, -0.00548213,
                            0.04844417, 0.08629687, 0.03759805, 0.11380209,
                            0.01752307, -0.0326601 ], [-0.03741262,
                                -0.11783611, 0.01891751, 0.0610058,
                                0.02070521, 0.0378261 , 0.04229393,
                                0.06219745, -0.01261699], [ 0.0223308 ,
                                    0.08480891, -0.01305962, -0.05076162,
                                    -0.02944228, -0.0312641 , -0.06036298,
                                    -0.0464532 , 0.01252487]])
    prox_gd_ans = gd.model.linear_nuclear(y, X, lam=lam,
            max_iter=10000, tol=1e-8, algo="prox_gd")
    acc_prox_gd_ans = gd.model.linear_nuclear(y, X, lam=lam,
            max_iter=10000, tol=1e-8, algo="acc_prox_gd")

    assert npla.norm(correct_ans - prox_gd_ans) < 5e-3
    assert npla.norm(correct_ans - acc_prox_gd_ans) < 1e-4

    n = 100
    p1 = 8
    p2 = 9
    npr.seed(124)
    y = npr.normal(size=n)
    X = npr.normal(size=(n, p1, p2))
    lam = 1.0
    correct_ans = np.array([[-0.08251344, -0.00465861, 0.09732229,
        -0.15441426, -0.23587926, 0.15431867, 0.21961431, -0.18110797,
        0.25904663], [-0.05959326, 0.01646512, -0.08715474, 0.07437803,
            0.0021066, -0.00359913, -0.06687619, -0.138584, 0.08876023],
        [-0.25910467, -0.18359945, -0.26324738, 0.47445996, 0.02706212,
            -0.14425015, -0.24626686, 0.18459584, 0.09208964], [-0.275908,
                0.10616316, 0.00771672, 0.02450302, 0.23197654, -0.21899284,
                0.04375571, 0.22764556, -0.08547392], [ 0.03316159,
                    -0.09053017, -0.07505213, 0.06592645, -0.1184218,
                    0.13423186, -0.11168822, 0.01817319, 0.31679887], [
                        0.08373028, -0.08714234, -0.11702149, -0.09260802,
                        0.1201752, -0.20307425, 0.00776427, 0.02135209,
                        0.00470371], [ 0.21545656, -0.0745909 , -0.06492658,
                            0.03437521, -0.27001192, -0.31874316, -0.04044877,
                            -0.17019011, -0.53085684], [ 0.07719902,
                                -0.00784565, -0.20753469, -0.08822945,
                                -0.08607676, -0.11591203,  0.12333857,
                                0.37225817, -0.00433395]])
    prox_gd_ans = gd.model.linear_nuclear(y, X, lam=lam,
            max_iter=10000, tol=1e-8, algo="prox_gd")
    acc_prox_gd_ans = gd.model.linear_nuclear(y, X, lam=lam,
            max_iter=10000, tol=1e-8, algo="acc_prox_gd")

    assert npla.norm(correct_ans - prox_gd_ans) < 1e-4
    assert npla.norm(correct_ans - acc_prox_gd_ans) < 1e-4


